
; PART 5

CODE_BBB07F:                   ;         \  just get the word of the first and unique list entry ?
    LDA.w DATA_FD0000,y        ;$BBB07F   | A = additinal_destination_0
    INY                        ;$BBB082   |
    INY                        ;$BBB083   | Y = rom read pointer [next additinal_destination_#(1?)]  if not  [end additinal_destination_list : 0xFFFF terminate word]
    STA $1A,x                  ;$BBB084   | $52F = additinal_destination_0
    RTS                        ;$BBB086  /
                               ;
    LDA.w DATA_FD0000,y        ;$BBB087   |
    INY                        ;$BBB08A   |
    INY                        ;$BBB08B   |
    STA $18,x                  ;$BBB08C   |
    RTS                        ;$BBB08E  /
                               ;
CODE_BBB08F:                   ;
    TYA                        ;$BBB08F  \  A = rom read pointer [next additinal_destination_#(1?)]  if not  [end additinal_destination_list : 0xFFFF terminate word]
    INY                        ;$BBB090   |
    INY                        ;$BBB091   | Y = rom read pointer [next additinal_destination_#(2?)]  if not  [end additinal_destination_list : 0xFFFF terminate word]
    STA $3C,x                  ;$BBB092   | $551 = rom read pointer [next additinal_destination_#(1?)]  if not  [end additinal_destination_list : 0xFFFF terminate word]
    RTS                        ;$BBB094  /  finally, end of process, is getting out
                               ;
CODE_BBB095:                   ;
    STZ $28,x                  ;$BBB095  \  $53D = 0
    STZ $2A,x                  ;$BBB097   | $53F = 0
    STZ $2C,x                  ;$BBB099   | $541 = 0
    STZ $2E,x                  ;$BBB09B   | $543 = 0
    STZ $30,x                  ;$BBB09D   | $545 = 0
    STZ $32,x                  ;$BBB09F   | $547 = 0
    STZ $34,x                  ;$BBB0A1   | $549 = 0
    STZ $36,x                  ;$BBB0A3   | $54B = 0
    PHX                        ;$BBB0A5   | push X on the stack
    BRA CODE_BBB0AE            ;$BBB0A6  /





CODE_BBB0A8:                   ;         \  Loop : get all destination level index
    INY                        ;$BBB0A8   |
    INY                        ;$BBB0A9   | Y = rom read pointer [next destination_lvl_index_#]
    STA $28,x                  ;$BBB0AA   | $53D,$53F,$541,$543,$545,$547,$549,$54B = "all" destination_lvl_index_0to"7"(max)
    INX                        ;$BBB0AC   |
    INX                        ;$BBB0AD   | X = wram write pointer [next destination_lvl_index_#]
CODE_BBB0AE:                   ;          |
    LDA.w DATA_FD0000,y        ;$BBB0AE   | A = [destination_lvl_index_# (destination_lvl_index_list[i])]  if not  [end destination_lvl_index_list : 0xFFFF terminate word]
    BPL CODE_BBB0A8            ;$BBB0B1   | check 0xFFFF terminate ; if (it is not end of destination_lvl_index_list) then keep getting destination_lvl_index
    INY                        ;$BBB0B3   |
    INY                        ;$BBB0B4   | Y = rom read pointer [curr lvl additinal_destination_list start]
    PLX                        ;$BBB0B5   | X = wram write pointer [0x515](curr lvl room type)
    RTS                        ;$BBB0B6  /

